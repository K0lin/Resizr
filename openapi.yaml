openapi: 3.0.3

info:
  title: RESIZR - Image Processing API
  description: |
    **RESIZR** is a high-performance image processing service that provides RESTful APIs for image upload, processing, and delivery.

    ## Features
    - **Smart Deduplication**: Automatic detection and sharing of identical image content with reference tracking
    - Multi-resolution image processing with configurable resize algorithms (smart-fit, crop, stretch)
    - Resolution aliases for user-friendly URLs and better maintainability
    - Support for JPEG, PNG, GIF, and WebP formats
    - Redis-based metadata storage and caching
    - S3-compatible storage backend
    - Rate limiting and security features

    ## Deduplication System
    RESIZR includes advanced deduplication that automatically shares identical image resolutions across users:

    **How it works:**
    - SHA-256 hash calculation for content identification
    - Byte-to-byte verification to prevent hash collisions
    - Reference counting for proper cleanup
    - Storage optimization with shared resolutions

    **Benefits:**
    - Reduced storage costs through content sharing
    - Faster uploads for duplicate content
    - User isolation with independent access permissions

    ## Resolution Aliases
    RESIZR supports resolution aliases for easier API usage:

    **Upload with aliases:**
    ```bash
    curl -F "resolutions=800x600:small,1920x1080:large" ...
    ```

    **Access by alias or dimensions:**
    ```
    GET /api/v1/images/{id}/small      # User-friendly alias
    GET /api/v1/images/{id}/800x600    # Traditional dimensions (backward compatible)
    ```
    
    ## Authentication
    RESIZR supports optional API key-based authentication with two permission levels:
    
    - **Read-Write Keys**: Can upload images and access all read operations
    - **Read-Only Keys**: Can only access download and info operations
    
    Authentication is disabled by default and can be enabled via configuration.
    When enabled, API keys must be provided in the `X-API-Key` header (configurable).
    
    ## Rate Limits
    - Upload: 10 requests/minute per IP
    - Download: 100 requests/minute per IP
    - Info: 50 requests/minute per IP
    
    ## CORS Support
    Cross-Origin Resource Sharing (CORS) is configurable:
    - Production: Restricted to configured allowed origins
    - Development: Allows all origins for testing
    - Configurable through environment variables
    
    ## Error Handling
    All errors follow a consistent JSON format with appropriate HTTP status codes.
    
  version: 0.0.1
  contact:
    name: RESIZR API Support
    url: https://github.com/k0lin/resizr
  license:
    name: Apache-2-0
    url: https://opensource.org/licenses/apache-2-0

servers:
  - url: http://localhost:8080
    description: Development server

tags:
  - name: Authentication
    description: API key generation and authentication status
  - name: Images
    description: Image upload, processing, and delivery operations
  - name: Statistics
    description: System statistics and monitoring metrics
  - name: Health
    description: Service health and monitoring endpoints

paths:
  /api/v1/auth/generate-key:
    get:
      tags:
        - Authentication
      summary: Generate API key
      description: |
        Generate a new cryptographically secure API key.
        
        **Permission Assignment:** The key's permission level is determined by which environment variable it's added to:
        - Add to `AUTH_READWRITE_KEYS` for full access (uploads, downloads, info)
        - Add to `AUTH_READONLY_KEYS` for read-only access (downloads, info only)
        
        **Note:** Generated keys must be manually added to environment configuration to become active.
        
      operationId: generateAPIKey
      responses:
        '201':
          description: API key generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_key:
                    type: string
                    description: Generated API key (64-character hex string)
                    example: a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef123456
                  message:
                    type: string
                    description: Success message with configuration instructions
                    example: API key generated successfully. Add it to AUTH_READWRITE_KEYS or AUTH_READONLY_KEYS environment variable to activate.
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/status:
    get:
      tags:
        - Authentication
      summary: Get authentication status
      description: |
        Get current authentication configuration status.
        
        Returns information about whether authentication is enabled and key counts.
        
      operationId: getAuthStatus
      responses:
        '200':
          description: Authentication status
          content:
            application/json:
              schema:
                type: object
                properties:
                  auth_enabled:
                    type: boolean
                    description: Whether authentication is currently enabled
                    example: true
                  key_header:
                    type: string
                    description: HTTP header name used for API keys
                    example: X-API-Key
                  read_write_keys_count:
                    type: integer
                    description: Number of configured read-write keys (only shown if auth enabled)
                    example: 2
                  read_only_keys_count:
                    type: integer
                    description: Number of configured read-only keys (only shown if auth enabled)
                    example: 3

  /api/v1/images:
    post:
      tags:
        - Images
      summary: Upload image
      description: |
        Upload a new image file with optional custom resolution processing.

        The service will:
        1. Validate the uploaded file (format, size, etc.)
        2. Generate a unique UUID for the image
        3. **Check for deduplication** - automatically detect if identical content already exists
        4. Process default resolutions (thumbnail) if enabled via GENERATE_DEFAULT_RESOLUTIONS
        5. Process any requested custom resolutions
        6. **Share storage** for duplicate content or store new files
        7. Save metadata to Redis with deduplication information

        **Deduplication Process:**
        - Calculates SHA-256 hash of image content
        - Compares with existing images for identical content
        - Performs byte-to-byte verification to prevent hash collisions
        - Shares existing resolutions when duplicates are found
        - Tracks reference counts for proper cleanup

        **Supported formats:** JPEG, PNG, GIF, WebP
        **Maximum file size:** 10MB (configurable)
        **Processing time:** Typically 200-500ms depending on image size and deduplication status

      operationId: uploadImage
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - image
              properties:
                image:
                  type: string
                  format: binary
                  description: Image file to upload (JPEG, PNG, GIF, or WebP)
                  example: "[binary data]"
                resolutions:
                  type: array
                  items:
                    type: string
                    pattern: '^[1-9]\d{0,3}x[1-9]\d{0,3}(:[a-zA-Z0-9_-]{1,50})?$'
                    example: "800x600:small"
                  description: |
                    Optional array of custom resolutions to generate.
                    Format: "WIDTHxHEIGHT" or "WIDTHxHEIGHT:alias" (e.g., ["800x600", "1200x900:medium"])
                    Aliases must be 1-50 characters, alphanumeric with underscores/hyphens only.
                    Supports multiple form fields or comma-separated values in a single field.
                    Maximum dimension (hard cap): 8,192 pixels. Default is 4,096 and configurable via IMAGE_MAX_WIDTH and IMAGE_MAX_HEIGHT up to the hard cap.
                  example: ["800x600:small", "1200x900:medium", "1920x1080:large"]
            encoding:
              image:
                contentType: image/jpeg, image/png, image/gif, image/webp
              resolutions:
                style: form
                explode: true
      responses:
        '201':
          description: Image uploaded successfully
          headers:
            X-Request-ID:
              schema:
                type: string
                format: uuid
              description: Unique request identifier for tracing
            Access-Control-Allow-Origin:
              schema:
                type: string
              description: CORS allowed origin
            Access-Control-Expose-Headers:
              schema:
                type: string
              description: Headers exposed to the client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResponse'
              example:
                id: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
                message: "Image uploaded successfully"
                resolutions: ["original", "thumbnail", "800x600:small", "1200x900:medium"]
                deduplication_info:
                  is_deduplicated: true
                  shared_image_id: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
                  shared_resolutions: ["800x600", "1200x900"]
                  reference_count: 3
                processing_time_ms: 450
        '400':
          $ref: '#/components/responses/BadRequest'
        '413':
          $ref: '#/components/responses/PayloadTooLarge'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /api/v1/images/{id}/info:
    get:
      tags:
        - Images
      summary: Get image metadata
      description: |
        Retrieve comprehensive metadata for an uploaded image, including:
        - File information (name, size, format, dimensions)
        - Available resolutions (original, thumbnail, custom)
        - Upload and modification timestamps
        
        This endpoint is lightweight and fast (~10ms response time).
        
      operationId: getImageInfo
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/ImageId'
      responses:
        '200':
          description: Image metadata retrieved successfully
          headers:
            X-Request-ID:
              schema:
                type: string
                format: uuid
              description: Unique request identifier for tracing
            Cache-Control:
              schema:
                type: string
              description: Caching directives
              example: "public, max-age=300"
            Access-Control-Allow-Origin:
              schema:
                type: string
              description: CORS allowed origin
            Access-Control-Expose-Headers:
              schema:
                type: string
              description: Headers exposed to the client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoResponse'
              example:
                id: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
                filename: "vacation-photo.jpg"
                mime_type: "image/jpeg"
                size: 2048000
                dimensions:
                  width: 1920
                  height: 1080
                available_resolutions: ["original", "thumbnail", "800x600:small", "1200x900:medium"]
                created_at: "2025-09-11T10:30:00Z"
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/images/{id}/{resolution}/presigned-url:
    get:
      tags:
        - Images
      summary: Generate presigned URL
      description: |
        Generate a temporary presigned URL for direct access to image files stored in S3.
        
        **Features:**
        - Direct client-side access to S3 without server proxy
        - Configurable expiration time (default: 1 hour, max: 7 days)
        - Support for all available image resolutions
        - Reduces server bandwidth and improves performance
        - Consistent with existing download endpoint structure
        
        **Use Cases:**
        - Mobile app integration with direct S3 access
        - Temporary image sharing with expiration
        - Client-side downloads for large images
        - CDN integration and caching optimization
        
      operationId: generatePresignedURL
      parameters:
        - $ref: '#/components/parameters/ImageId'
        - $ref: '#/components/parameters/Resolution'
        - name: expires_in
          in: query
          required: false
          description: "URL expiration time in seconds (default: 3600, max: 604800)"
          schema:
            type: integer
            minimum: 1
            maximum: 604800
            default: 3600
          example: 3600
      responses:
        '200':
          description: Presigned URL generated successfully
          headers:
            X-Request-ID:
              schema:
                type: string
                format: uuid
              description: Unique request identifier for tracing
            Access-Control-Allow-Origin:
              schema:
                type: string
              description: CORS allowed origin
            Access-Control-Expose-Headers:
              schema:
                type: string
              description: Headers exposed to the client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresignedURLResponse'
              example:
                url: "https://bucket.s3.amazonaws.com/images/f47ac10b-58cc-4372-a567-0e02b2c3d479/thumbnail.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=..."
                expires_at: "2025-09-12T16:30:00Z"
                expires_in: 3600
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/images/{id}/original:
    get:
      tags:
        - Images
      summary: Download original image
      description: |
        Download the original uploaded image file.
        
        **Features:**
        - Streaming download for large files
        - Proper caching headers for CDN compatibility
        - ETag support for conditional requests
        - Range request support for partial downloads
        
      operationId: downloadOriginal
      parameters:
        - $ref: '#/components/parameters/ImageId'
        - $ref: '#/components/parameters/IfNoneMatch'
        - $ref: '#/components/parameters/Range'
      responses:
        '200':
          description: Original image file
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
              description: CORS allowed origin
            Access-Control-Expose-Headers:
              schema:
                type: string
              description: Headers exposed to the client
            Content-Type:
              schema:
                type: string
              description: MIME type of the image
              example: "image/jpeg"
            Content-Length:
              schema:
                type: integer
              description: Size of the image in bytes
              example: 2048000
            Cache-Control:
              schema:
                type: string
              description: Caching directives
              example: "public, max-age=31536000, immutable"
            ETag:
              schema:
                type: string
              description: Entity tag for caching
              example: '"abc123def456"'
            X-Request-ID:
              schema:
                type: string
                format: uuid
              description: Unique request identifier for tracing
          content:
            image/*:
              schema:
                type: string
                format: binary
        '206':
          description: Partial content (range request)
          headers:
            Content-Type:
              schema:
                type: string
              example: "image/jpeg"
            Content-Range:
              schema:
                type: string
              example: "bytes 0-1023/2048000"
            Content-Length:
              schema:
                type: integer
              example: 1024
          content:
            image/*:
              schema:
                type: string
                format: binary
        '304':
          $ref: '#/components/responses/NotModified'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/images/{id}/thumbnail:
    get:
      tags:
        - Images
      summary: Download thumbnail
      description: |
        Download a 150x150 pixel thumbnail version of the image.
        
        **Processing:**
        - Smart-fit algorithm maintains aspect ratio
        - White background for letterboxing/pillarboxing
        - Optimized compression for fast loading
        
      operationId: downloadThumbnail
      parameters:
        - $ref: '#/components/parameters/ImageId'
        - $ref: '#/components/parameters/IfNoneMatch'
      responses:
        '200':
          description: Thumbnail image (150x150)
          headers:
            Content-Type:
              schema:
                type: string
              example: "image/jpeg"
            Content-Length:
              schema:
                type: integer
              example: 8192
            Cache-Control:
              schema:
                type: string
              example: "public, max-age=31536000, immutable"
            ETag:
              schema:
                type: string
              example: '"thumbnail-abc123"'
          content:
            image/*:
              schema:
                type: string
                format: binary
        '304':
          $ref: '#/components/responses/NotModified'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/images/{id}/{resolution}:
    get:
      tags:
        - Images
      summary: Download custom resolution
      description: |
        Download a custom resolution version of the image.
        
        **Resolution Format:**
        - Must match pattern: WIDTHxHEIGHT (e.g., "800x600", "1200x900")
        - Both width and height must be positive integers
        - Maximum dimension (hard cap): 8,192 pixels. Default is 4,096 and configurable via IMAGE_MAX_WIDTH and IMAGE_MAX_HEIGHT up to the hard cap.
        - Resolution must have been requested during upload
        
        **Processing:**
        - Smart-fit algorithm maintains aspect ratio
        - White background for letterboxing/pillarboxing
        - Quality optimized for resolution size
        
      operationId: downloadCustomResolution
      parameters:
        - $ref: '#/components/parameters/ImageId'
        - name: resolution
          in: path
          required: true
          description: |
            Custom resolution in WIDTHxHEIGHT format (e.g., "800x600") or alias (e.g., "small").
            Must be a resolution that was requested during upload.
          schema:
            type: string
            pattern: '^([1-9]\d{0,3}x[1-9]\d{0,3}|[a-zA-Z0-9_-]{1,50})$'
            example: "small"
        - $ref: '#/components/parameters/IfNoneMatch'
      responses:
        '200':
          description: Custom resolution image
          headers:
            Content-Type:
              schema:
                type: string
              example: "image/jpeg"
            Content-Length:
              schema:
                type: integer
              example: 131072
            Cache-Control:
              schema:
                type: string
              example: "public, max-age=31536000, immutable"
          content:
            image/*:
              schema:
                type: string
                format: binary
        '304':
          $ref: '#/components/responses/NotModified'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Images
      summary: Delete specific resolution
      description: |
        Delete a specific resolution of an uploaded image.

        **Deduplication Behavior:**
        - Only removes the user's reference to this specific resolution
        - Physical file is only deleted when the last user reference is removed
        - Other resolutions of the same image remain intact
        - Shared resolutions used by other users remain intact

        **Supported Resolutions:**
        - "original": Delete original uploaded image
        - "thumbnail": Delete thumbnail (150x150)
        - "WIDTHxHEIGHT": Delete custom resolution (e.g., "800x600")
        - "alias": Delete aliased resolution (e.g., "small")

        **Note:** This operation cannot be undone. Use with caution.

      operationId: deleteResolution
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/ImageId'
        - name: resolution
          in: path
          required: true
          description: |
            Resolution to delete. Can be:
            - "original": Original uploaded image
            - "thumbnail": Thumbnail (150x150)
            - "WIDTHxHEIGHT": Custom resolution (e.g., "800x600")
            - "alias": Aliased resolution (e.g., "small")
          schema:
            type: string
            pattern: '^(original|thumbnail|[1-9]\d{0,3}x[1-9]\d{0,3}|[a-zA-Z0-9_-]{1,50})$'
            example: "800x600"
      responses:
        '200':
          description: Resolution deleted successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
                    description: Success message
                    example: "Resolution deleted successfully"
                  deleted:
                    type: boolean
                    description: Whether the physical file was deleted (false if shared)
                    example: false
                  remaining_references:
                    type: integer
                    description: Number of remaining users referencing this resolution
                    example: 2
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/images/{id}:
    delete:
      tags:
        - Images
      summary: Delete image
      description: |
        Delete an uploaded image and all its resolutions.

        **Deduplication Behavior:**
        - Only removes the user's reference to the image
        - Physical files are only deleted when the last user reference is removed
        - Shared resolutions used by other users remain intact
        - Prevents accidental deletion of shared content

        **Cleanup Process:**
        1. Decrement reference count for each resolution
        2. Remove user's metadata entry
        3. Delete physical files only when reference count reaches zero
        4. Clean up orphaned metadata and cache entries

        **Note:** This operation cannot be undone. Use with caution.

      operationId: deleteImage
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/ImageId'
      responses:
        '200':
          description: Image deleted successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - deleted_resolutions
                properties:
                  message:
                    type: string
                    description: Success message
                    example: "Image deleted successfully"
                  deleted_resolutions:
                    type: array
                    items:
                      type: string
                    description: List of resolutions that were deleted (may be empty if shared)
                    example: ["original", "thumbnail", "800x600"]
                  shared_resolutions:
                    type: array
                    items:
                      type: string
                    description: List of resolutions that remain shared with other users
                    example: ["1200x900", "1920x1080"]
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: |
        Check the health status of the RESIZR service and its dependencies.

        **Health Checks Include:**
        - Application status
        - Redis connectivity and response time
        - S3 storage accessibility
        - System resources (memory, disk space)
        - Deduplication system metrics and status

        **Deduplication Metrics:**
        - Total shared resolutions count
        - Estimated storage savings
        - Average references per resolution
        - Deduplication ratio and efficiency

        This endpoint is used by load balancers and monitoring systems.

      operationId: healthCheck
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              example:
                status: "healthy"
                services:
                  redis: "connected"
                  s3: "connected"
                  application: "healthy"
                timestamp: "2025-09-11T10:30:00Z"
                deduplication:
                  enabled: true
                  total_shared_resolutions: 1250
                  average_references_per_resolution: 2.3
                  total_deduplicated_images: 2875
                  deduplication_ratio: 0.68
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              example:
                status: "unhealthy"
                services:
                  redis: "disconnected"
                  s3: "connected"
                  application: "degraded"
                timestamp: "2025-09-11T10:30:00Z"
                deduplication:
                  enabled: true
                  total_shared_resolutions: 1250
                  average_references_per_resolution: 2.3
                  total_deduplicated_images: 2875
                  deduplication_ratio: 0.68

  /api/v1/statistics:
    get:
      tags:
        - Statistics
      summary: Get comprehensive system statistics
      description: |
        Retrieve comprehensive statistics about the RESIZR service including images, storage, deduplication, and performance metrics.

        **Statistics Include:**
        - Total images and resolutions count
        - Storage utilization and savings from deduplication
        - Deduplication effectiveness metrics
        - Performance metrics (processing times, cache hit rates)
        - System resource utilization

        Results are cached for improved performance with configurable TTL.

      operationId: getComprehensiveStatistics
      parameters:
        - name: detailed
          in: query
          description: Include detailed breakdown of statistics
          required: false
          schema:
            type: boolean
            default: false
        - name: performance
          in: query
          description: Include performance metrics
          required: false
          schema:
            type: boolean
            default: true
        - name: system
          in: query
          description: Include system metrics
          required: false
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Comprehensive statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResizrStatistics'
              example:
                image_stats:
                  total_images: 15420
                  total_resolutions: 52340
                  average_resolutions_per_image: 3.4
                  image_breakdown:
                    jpeg: 12336
                    png: 2584
                    webp: 500
                storage_stats:
                  total_storage_bytes: 15728640000
                  original_storage_bytes: 8589934592
                  resized_storage_bytes: 7138705408
                  storage_efficiency_ratio: 0.86
                deduplication_stats:
                  enabled: true
                  total_shared_resolutions: 8520
                  deduplication_ratio: 0.72
                  average_references_per_resolution: 2.8
                system_stats:
                  uptime_seconds: 2592000
                  memory_usage_mb: 512.8
                  cpu_usage_percent: 15.2
                  goroutines_active: 45
                  storage_available_bytes: 1099511627776
                cache_info:
                  cached: true
                  cache_age_seconds: 120
                  ttl_seconds: 300
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/statistics/images:
    get:
      tags:
        - Statistics
      summary: Get image-specific statistics
      description: |
        Retrieve statistics specifically about images in the system.

        **Image Statistics Include:**
        - Total image count
        - Total resolutions count
        - Average resolutions per image
        - Breakdown by image format

      operationId: getImageStatistics
      responses:
        '200':
          description: Image statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageStats'
              example:
                total_images: 15420
                total_resolutions: 52340
                average_resolutions_per_image: 3.4
                image_breakdown:
                  jpeg: 12336
                  png: 2584
                  webp: 500
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/statistics/storage:
    get:
      tags:
        - Statistics
      summary: Get storage-specific statistics
      description: |
        Retrieve statistics about storage utilization and efficiency.

        **Storage Statistics Include:**
        - Total storage usage
        - Original vs resized storage breakdown
        - Storage savings from deduplication
        - Storage efficiency ratios

      operationId: getStorageStatistics
      responses:
        '200':
          description: Storage statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageStats'
              example:
                total_storage_bytes: 15728640000
                original_storage_bytes: 8589934592
                resized_storage_bytes: 7138705408
                storage_efficiency_ratio: 0.86
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/statistics/deduplication:
    get:
      tags:
        - Statistics
      summary: Get deduplication-specific statistics
      description: |
        Retrieve statistics about the deduplication system effectiveness.

        **Deduplication Statistics Include:**
        - Deduplication enabled status
        - Total shared resolutions
        - Deduplication ratio
        - Storage savings from deduplication
        - Average references per resolution

      operationId: getDeduplicationStatistics
      responses:
        '200':
          description: Deduplication statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeduplicationStats'
              example:
                enabled: true
                total_shared_resolutions: 8520
                deduplication_ratio: 0.72
                average_references_per_resolution: 2.8
        '500':
          $ref: '#/components/responses/InternalServerError'


  /api/v1/statistics/refresh:
    post:
      tags:
        - Statistics
      summary: Refresh statistics cache
      description: |
        Force refresh the statistics cache by clearing existing cached data.
        The next statistics request will fetch fresh data from all sources.

        **Use Cases:**
        - Force immediate update after bulk operations
        - Refresh data for critical monitoring
        - Clear potentially stale cache data

      operationId: refreshStatisticsCache
      responses:
        '200':
          description: Statistics cache refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Statistics cache refreshed successfully"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-09-20T15:30:45Z"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /debug/vars:
    get:
      tags:
        - Health
      summary: Runtime metrics
      description: |
        Get runtime metrics and statistics (development mode only).
        
        **Available Metrics:**
        - Memory usage and GC statistics
        - Goroutine count
        - HTTP request counters
        - Image processing statistics
        - Cache hit/miss ratios
        
        This endpoint is only available when the service is running in development mode.
        
      operationId: getRuntimeMetrics
      responses:
        '200':
          description: Runtime metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsResponse'
              example:
                memory:
                  alloc: 1048576
                  total_alloc: 10485760
                  sys: 67108864
                  heap_alloc: 1048576
                goroutines: 10
                gc:
                  num_gc: 5
                  pause_ns: [500000, 400000, 600000]
                uptime: "1h30m45s"
                custom:
                  upload_count: 150
                  download_count: 2500
                  cache_hit_ratio: 0.85
        '404':
          description: Metrics endpoint not available (production mode)

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: |
        API key authentication. Required when authentication is enabled.
        
        Two types of keys are supported:
        - **Read-Write Keys**: Can upload images and access all read operations
        - **Read-Only Keys**: Can only access download and info operations

  parameters:
    ImageId:
      name: id
      in: path
      required: true
      description: Unique UUID identifier of the image
      schema:
        type: string
        format: uuid
        pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
      example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
    
    IfNoneMatch:
      name: If-None-Match
      in: header
      required: false
      description: ETag for conditional requests (returns 304 if not modified)
      schema:
        type: string
      example: '"abc123def456"'
    
    Range:
      name: Range
      in: header
      required: false
      description: Byte range for partial content requests
      schema:
        type: string
      example: "bytes=0-1023"
    
    Resolution:
      name: resolution
      in: path
      required: true
      description: Image resolution/size (dimensions, alias, or predefined)
      schema:
        type: string
        pattern: '^(original|thumbnail|[1-9]\d{0,3}x[1-9]\d{0,3}|[a-zA-Z0-9_-]{1,50})$'
      example: "small"

  schemas:
    UploadResponse:
      type: object
      required:
        - id
        - message
        - resolutions
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the uploaded image
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        message:
          type: string
          description: Success message
          example: "Image uploaded successfully"
        resolutions:
          type: array
          items:
            type: string
          description: List of available resolutions for this image (may include aliases)
          example: ["original", "thumbnail", "800x600:small", "1200x900:medium"]
        deduplication_info:
          type: object
          description: Deduplication information (only present if image was deduplicated)
          properties:
            is_deduplicated:
              type: boolean
              description: Whether this image shares storage with other images
              example: true
            shared_image_id:
              type: string
              format: uuid
              description: ID of the master image that contains the shared storage
              example: "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
            shared_resolutions:
              type: array
              items:
                type: string
              description: List of resolutions that are shared with other images
              example: ["800x600", "1200x900"]
            reference_count:
              type: integer
              description: Total number of images (including this one) that reference the shared content
              example: 3
        processing_time_ms:
          type: integer
          description: Time taken to process the image in milliseconds
          example: 450

    DeduplicationInfo:
      type: object
      description: Information about deduplicated content sharing
      properties:
        hash:
          type: string
          description: SHA-256 hash of the image content used for deduplication
          example: "abc123def4567890abcdef1234567890abcdef1234567890abcdef123456"
        algorithm:
          type: string
          description: Hash algorithm used
          example: "SHA256"
        master_image_id:
          type: string
          format: uuid
          description: ID of the first image that uploaded this content
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        reference_count:
          type: integer
          description: Total number of images referencing this shared content
          example: 5
        storage_key:
          type: string
          description: S3 storage key for the shared content
          example: "images/shared/abc123_800x600.jpg"
        shared_resolutions:
          type: array
          items:
            type: string
          description: List of resolutions that are shared
          example: ["800x600", "1200x900", "1920x1080"]

    ResolutionReference:
      type: object
      description: Reference tracking for a specific resolution
      properties:
        resolution:
          type: string
          description: Resolution identifier (dimensions or alias)
          example: "800x600"
        referencing_image_ids:
          type: array
          items:
            type: string
            format: uuid
          description: List of image IDs that reference this resolution
          example: ["f47ac10b-58cc-4372-a567-0e02b2c3d479", "a1b2c3d4-e5f6-7890-abcd-ef1234567890"]
        reference_count:
          type: integer
          description: Number of images referencing this resolution
          example: 2

    ImageHash:
      type: object
      description: Hash information for image deduplication
      required:
        - algorithm
        - value
        - size
      properties:
        algorithm:
          type: string
          description: Hash algorithm used
          example: "SHA256"
        value:
          type: string
          description: Hex-encoded hash value
          example: "abc123def4567890abcdef1234567890abcdef1234567890abcdef123456"
        size:
          type: integer
          format: int64
          description: Original file size in bytes
          example: 2048576

    InfoResponse:
      type: object
      required:
        - id
        - filename
        - mime_type
        - size
        - dimensions
        - available_resolutions
        - created_at
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the image
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        filename:
          type: string
          description: Original filename from upload
          example: "vacation-photo.jpg"
        mime_type:
          type: string
          description: MIME type of the image
          enum: ["image/jpeg", "image/png", "image/gif", "image/webp"]
          example: "image/jpeg"
        size:
          type: integer
          format: int64
          description: File size in bytes
          example: 2048000
        dimensions:
          $ref: '#/components/schemas/Dimensions'
        available_resolutions:
          type: array
          items:
            type: string
          description: List of available resolutions for this image (may include aliases)
          example: ["original", "thumbnail", "800x600:small", "1200x900:medium"]
        created_at:
          type: string
          format: date-time
          description: Timestamp when the image was uploaded
          example: "2025-09-11T10:30:00Z"

    PresignedURLResponse:
      type: object
      required:
        - url
        - expires_at
        - expires_in
      properties:
        url:
          type: string
          format: uri
          description: Presigned URL for direct access to the image
          example: "https://bucket.s3.amazonaws.com/images/f47ac10b-58cc-4372-a567-0e02b2c3d479/thumbnail.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=..."
        expires_at:
          type: string
          format: date-time
          description: Timestamp when the presigned URL expires
          example: "2025-09-12T16:30:00Z"
        expires_in:
          type: integer
          description: URL expiration time in seconds
          example: 3600

    Dimensions:
      type: object
      required:
        - width
        - height
      properties:
        width:
          type: integer
          description: Image width in pixels
          example: 1920
        height:
          type: integer
          description: Image height in pixels
          example: 1080

    HealthResponse:
      type: object
      required:
        - status
        - services
        - timestamp
      properties:
        status:
          type: string
          description: Overall health status
          enum: ["healthy", "unhealthy", "degraded"]
          example: "healthy"
        services:
          type: object
          description: Status of individual services
          additionalProperties:
            type: string
          example:
            redis: "connected"
            s3: "connected"
            application: "healthy"
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the health check
          example: "2025-09-11T10:30:00Z"
        deduplication:
          type: object
          description: Deduplication system metrics and status
          properties:
            enabled:
              type: boolean
              description: Whether deduplication is enabled
              example: true
            total_shared_resolutions:
              type: integer
              description: Total number of shared resolution files
              example: 1250
            average_references_per_resolution:
              type: number
              format: float
              description: Average number of images referencing each shared resolution
              example: 2.3
            total_deduplicated_images:
              type: integer
              description: Total number of images that are deduplicated (share storage)
              example: 2875
            deduplication_ratio:
              type: number
              format: float
              description: Ratio of deduplicated images to total images (0.0 to 1.0)
              example: 0.68

    MetricsResponse:
      type: object
      description: Runtime metrics and statistics
      properties:
        memory:
          type: object
          properties:
            alloc:
              type: integer
              description: Currently allocated bytes
            total_alloc:
              type: integer
              description: Total allocated bytes (cumulative)
            sys:
              type: integer
              description: System memory obtained from OS
            heap_alloc:
              type: integer
              description: Heap allocated bytes
        goroutines:
          type: integer
          description: Number of active goroutines
        gc:
          type: object
          properties:
            num_gc:
              type: integer
              description: Number of GC cycles
            pause_ns:
              type: array
              items:
                type: integer
              description: Recent GC pause times in nanoseconds
        uptime:
          type: string
          description: Service uptime
        custom:
          type: object
          description: Application-specific metrics
          additionalProperties: true

    ErrorResponse:
      type: object
      required:
        - error
        - message
        - code
      properties:
        error:
          type: string
          description: Error category or type
          example: "Validation failed"
        message:
          type: string
          description: Human-readable error message
          example: "The uploaded file exceeds the maximum size limit"
        code:
          type: integer
          description: HTTP status code
          example: 400

    ResizrStatistics:
      type: object
      description: Comprehensive system statistics
      required:
        - image_stats
        - storage_stats
        - deduplication_stats
        - cache_info
      properties:
        image_stats:
          $ref: '#/components/schemas/ImageStats'
        storage_stats:
          $ref: '#/components/schemas/StorageStats'
        deduplication_stats:
          $ref: '#/components/schemas/DeduplicationStats'
        system_stats:
          $ref: '#/components/schemas/SystemStats'
        cache_info:
          $ref: '#/components/schemas/CacheInfo'

    ImageStats:
      type: object
      description: Image-related statistics
      required:
        - total_images
        - total_resolutions
        - average_resolutions_per_image
      properties:
        total_images:
          type: integer
          description: Total number of images stored
          example: 15420
        total_resolutions:
          type: integer
          description: Total number of resolutions stored across all images
          example: 52340
        average_resolutions_per_image:
          type: number
          format: float
          description: Average number of resolutions per image
          example: 3.4
        image_breakdown:
          type: object
          description: Breakdown of images by format
          additionalProperties:
            type: integer
          example:
            jpeg: 12336
            png: 2584
            webp: 500

    StorageStats:
      type: object
      description: Storage utilization statistics
      required:
        - total_storage_bytes
        - original_storage_bytes
        - resized_storage_bytes
      properties:
        total_storage_bytes:
          type: integer
          format: int64
          description: Total storage used by all images in bytes
          example: 15728640000
        original_storage_bytes:
          type: integer
          format: int64
          description: Storage used by original images in bytes
          example: 8589934592
        resized_storage_bytes:
          type: integer
          format: int64
          description: Storage used by resized images in bytes
          example: 7138705408
        storage_efficiency_ratio:
          type: number
          format: float
          description: Storage efficiency ratio (0.0 to 1.0)
          example: 0.86

    DeduplicationStats:
      type: object
      description: Deduplication system statistics
      required:
        - enabled
        - total_shared_resolutions
        - deduplication_ratio
      properties:
        enabled:
          type: boolean
          description: Whether deduplication is enabled
          example: true
        total_shared_resolutions:
          type: integer
          description: Total number of shared resolutions
          example: 8520
        deduplication_ratio:
          type: number
          format: float
          description: Deduplication effectiveness ratio (0.0 to 1.0)
          example: 0.72
        average_references_per_resolution:
          type: number
          format: float
          description: Average number of references per shared resolution
          example: 2.8


    SystemStats:
      type: object
      description: System resource utilization statistics
      properties:
        uptime_seconds:
          type: integer
          format: int64
          description: System uptime in seconds
          example: 2592000
        memory_usage_mb:
          type: number
          format: float
          description: Current memory usage in MB
          example: 512.8
        cpu_usage_percent:
          type: number
          format: float
          description: Current CPU usage percentage
          example: 15.2
        goroutines_active:
          type: integer
          description: Number of active goroutines
          example: 45
        storage_available_bytes:
          type: integer
          format: int64
          description: Available storage space in bytes
          example: 1099511627776

    CacheInfo:
      type: object
      description: Cache information for statistics
      required:
        - cached
        - cache_age_seconds
        - ttl_seconds
      properties:
        cached:
          type: boolean
          description: Whether the data is served from cache
          example: true
        cache_age_seconds:
          type: integer
          description: Age of cached data in seconds
          example: 120
        ttl_seconds:
          type: integer
          description: Cache TTL in seconds
          example: 300

  responses:
    BadRequest:
      description: Bad request - invalid input
      headers:
        X-Request-ID:
          schema:
            type: string
            format: uuid
          description: Unique request identifier for tracing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            InvalidFile:
              summary: Invalid file format
              value:
                error: "Validation failed"
                message: "Unsupported file format. Supported formats: JPEG, PNG, GIF, WebP"
                code: 400
            InvalidResolution:
              summary: Invalid resolution format
              value:
                error: "Validation failed"
                message: "Invalid resolution format. Use WIDTHxHEIGHT (e.g., 800x600), WIDTHxHEIGHT:alias (e.g., 800x600:small), or a valid alias"
                code: 400
            InvalidUUID:
              summary: Invalid UUID
              value:
                error: "Validation failed"
                message: "Invalid UUID format"
                code: 400

    NotFound:
      description: Resource not found
      headers:
        X-Request-ID:
          schema:
            type: string
            format: uuid
          description: Unique request identifier for tracing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            ImageNotFound:
              summary: Image not found
              value:
                error: "Resource not found"
                message: "Image with ID 'f47ac10b-58cc-4372-a567-0e02b2c3d479' not found"
                code: 404
            ResolutionNotFound:
              summary: Resolution not available
              value:
                error: "Resource not found"
                message: "Resolution '800x600' not available for this image"
                code: 404

    PayloadTooLarge:
      description: File size exceeds limit
      headers:
        X-Request-ID:
          schema:
            type: string
            format: uuid
          description: Unique request identifier for tracing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Payload too large"
            message: "File size exceeds the maximum limit of 10MB"
            code: 413

    UnsupportedMediaType:
      description: Unsupported file format
      headers:
        X-Request-ID:
          schema:
            type: string
            format: uuid
          description: Unique request identifier for tracing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Unsupported media type"
            message: "File format not supported. Supported formats: JPEG, PNG, GIF, WebP"
            code: 415

    UnprocessableEntity:
      description: Processing failed
      headers:
        X-Request-ID:
          schema:
            type: string
            format: uuid
          description: Unique request identifier for tracing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            ProcessingFailed:
              summary: Image processing failed
              value:
                error: "Processing failed"
                message: "Failed to process image: corrupted or invalid image data"
                code: 422
            ResolutionTooLarge:
              summary: Resolution too large
              value:
                error: "Processing failed"
                message: "Requested resolution exceeds maximum dimension of 8,192 pixels"
                code: 422

    TooManyRequests:
      description: Rate limit exceeded
      headers:
        X-Request-ID:
          schema:
            type: string
            format: uuid
          description: Unique request identifier for tracing
        Retry-After:
          schema:
            type: integer
          description: Seconds to wait before retrying
          example: 60
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Rate limit exceeded"
            message: "Too many requests. Please try again later"
            code: 429

    Forbidden:
      description: Access forbidden - authentication required or insufficient permissions
      headers:
        X-Request-ID:
          schema:
            type: string
            format: uuid
          description: Unique request identifier for tracing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Access forbidden"
            message: "Authentication required or insufficient permissions for this operation"
            code: 403

    InternalServerError:
      description: Internal server error
      headers:
        X-Request-ID:
          schema:
            type: string
            format: uuid
          description: Unique request identifier for tracing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Internal server error"
            message: "An unexpected error occurred. Please try again later"
            code: 500

    ServiceUnavailable:
      description: Service or dependencies unavailable
      headers:
        X-Request-ID:
          schema:
            type: string
            format: uuid
          description: Unique request identifier for tracing
        Retry-After:
          schema:
            type: integer
          description: Seconds to wait before retrying
          example: 300
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            RedisUnavailable:
              summary: Redis connection failed
              value:
                error: "Service unavailable"
                message: "Database service temporarily unavailable"
                code: 503
            S3Unavailable:
              summary: Storage unavailable
              value:
                error: "Service unavailable"
                message: "Storage service temporarily unavailable"
                code: 503

    NotModified:
      description: Not modified (304) - content unchanged
      headers:
        ETag:
          schema:
            type: string
          description: Entity tag
          example: '"abc123def456"'
        Cache-Control:
          schema:
            type: string
          description: Caching directives
          example: "public, max-age=31536000, immutable"

security: []

externalDocs:
  description: RESIZR Documentation
  url: https://github.com/k0lin/resizr/blob/main/README.md
